#!/usr/bin/env bash
# This script reads a git diff -U0 from standard input and outputs YAML
# with keys "add<new_line>:" for additions (using YAML block literal)
# and "del<old_line>:" for deletions (output as an empty key).

# current block type: either "add" for additions or "del" for deletions.
current_block_type=""
block_start=""
block_content=""

# These variables hold the current pointers from the hunk header.
# old_line: line number in the "from" file; new_line: in the "to" file.
old_line=0
new_line=0

# Flush (print) the currently accumulated block (if any)
flush_block() {
	if [ -z "$current_block_type" ]; then
		return
	fi

	if [ "$current_block_type" == "add" ]; then
		# For additions, output the starting new line as key and use YAML literal block.
		echo "add${block_start}: |"
		# Preserve exact indentation in the block literal
		echo "$block_content" | while IFS= read -r line; do
		echo "  $line"
	done
elif [ "$current_block_type" == "del" ]; then
	# For deletions, output the key with no block content.
	echo "del${block_start}:"
	fi
	current_block_type=""
	block_start=""
	block_content=""
}

# Process the diff input line by line.
while IFS= read -r line; do
	# Skip diff header lines
	if [[ $line =~ ^(diff\ |\+\+\+|---) ]]; then
		continue
	fi

	# Parse hunk headers to get line numbers
	if [[ $line =~ ^@@\ -([0-9]+)(,[0-9]+)?\ \+([0-9]+)(,[0-9]+)?\ @@ ]]; then
		flush_block  # Flush any existing block before starting a new hunk
		old_line="${BASH_REMATCH[1]}"
		new_line="${BASH_REMATCH[3]}"
		continue
	fi

	# If the line is an addition line (starts with '+')
	if [[ $line =~ ^\+ ]]; then
		# Begin a new addition block if needed.
		if [ "$current_block_type" != "add" ]; then
			flush_block
			current_block_type="add"
			block_start="$new_line"
		fi
		# Remove the first character ('+') and append the remaining text.
		content="${line:1}"
		if [ -z "$block_content" ]; then
			block_content="$content"
		else
			block_content="${block_content}"$'\n'"$content"
		fi
		((new_line++))
		continue
		fi

	# If the line is a deletion line (starts with '-')
	if [[ $line =~ ^\- ]]; then
		if [ "$current_block_type" != "del" ]; then
			flush_block
			current_block_type="del"
			block_start="$old_line"
		fi
		((old_line++))
		continue
	fi

	# Context lines (starting with ' ')
	if [[ $line =~ ^\  ]]; then
		flush_block  # Flush current block when we hit a context line
		((old_line++))
		((new_line++))
		continue
	fi
done

flush_block
