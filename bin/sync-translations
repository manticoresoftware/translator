#!/usr/bin/env bash

# Get script and project directories
TRANSLATOR_DIR="$( cd "$( dirname "${BASH_SOURCE[0]}" )/.." && pwd )"

# Check for help argument
if [[ "$1" == "-h" || "$1" == "--help" ]]; then
	echo "Usage: $0 [project_directory]"
	echo ""
	echo "Synchronizes already translated markdown files with the source structure."
	echo "This ensures that the line count and structure match between source and translated files."
	echo ""
	echo "If project_directory is not provided, the parent directory of the translator folder will be used."
	echo "Configuration is loaded from your project's translator.config.yaml file."
	echo "If this file doesn't exist, default configuration values will be used."
	exit 0
fi

# If no project directory specified, use parent directory
if [ -z "$1" ]; then
	PROJECT_DIR="$( cd "$TRANSLATOR_DIR/.." && pwd )"
else
	PROJECT_DIR="$( cd "$1" && pwd )"
fi

# Source library functions
source "$TRANSLATOR_DIR/bin/lib.sh"

# Load project configuration
load_config "$TRANSLATOR_DIR" "$PROJECT_DIR"

# Verify configuration is loaded correctly
echo "Using project directory: $PROJECT_DIR"
echo "Source directory: $SOURCE_DIR"
echo "Target directory: $TARGET_DIR"

# Find other languages
languages=()
for language in "$TARGET_DIR"/*/; do
	if [ -d "$language" ] && [ "$language" != "$SOURCE_DIR" ]; then
		dir_name=$(basename "$language")
		if [ "$dir_name" != "english" ]; then
			languages+=("$dir_name")
		fi
	fi
done

echo "Languages to sync: ${languages[*]}"


process_markdown_files() {
	local dir="$1"
	local sync_failed=0

	# Find all .md files in the directory and subdirectories
	mapfile -t markdown_files < <(find "$dir" -type f -name "*.md")
	for file in "${markdown_files[@]}"; do
		# Get relative path
		relative_path=${file#"$SOURCE_DIR"/}
		echo "Processing: $relative_path"

		for language in "${languages[@]}"; do
			target_path="$TARGET_DIR/$language/$relative_path"

			if [ ! -f "$target_path" ]; then
				echo " -> $language: file doesn't exist, skipping"
				continue
			fi

			if [ $(wc -l < "$file") -eq $(wc -l < "$target_path") ]; then
				echo " -> $language: already synced"
				continue
			fi

			echo " -> $language: syncing"
			temp_file=$(mktemp)

			if sync_files "$file" "$target_path" > "$temp_file"; then
				mv "$temp_file" "$target_path"
				echo "    completed"
			else
				echo "    failed to sync, removing translation"
				rm -f "$temp_file"
				rm -f "$target_path"
				sync_failed=1
			fi
		done
	done
	return $sync_failed
}

# Check if source directory exists
if [ ! -d "$SOURCE_DIR" ]; then
	echo "Error: Source directory does not exist"
	exit 1
fi

# Process markdown files
process_markdown_files "$SOURCE_DIR"

echo "Sync complete."
