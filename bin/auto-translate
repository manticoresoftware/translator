#!/usr/bin/env bash

# Get script and project directories
TRANSLATOR_DIR="$( cd "$( dirname "${BASH_SOURCE[0]}" )/.." && pwd )"

# Check for help argument
if [[ "$1" == "-h" || "$1" == "--help" ]]; then
	echo "Usage: $0 [project_directory]"
	echo ""
	echo "Automatically translates markdown files from the source language to all target languages."
	echo ""
	echo "If project_directory is not provided, the parent directory of the translator folder will be used."
	echo "Configuration is loaded from your project's translator.config.yaml and translator.models.yaml files."
	echo "If these files don't exist, default configuration values will be used."
	exit 0
fi

# If no project directory specified, use parent directory
if [ -z "$1" ]; then
	PROJECT_DIR="$( cd "$TRANSLATOR_DIR/.." && pwd )"
else
	PROJECT_DIR="$( cd "$1" && pwd )"
fi

# Try to get project name from git remote, fallback to directory name
if git rev-parse --is-inside-work-tree >/dev/null 2>&1; then
	# Try to extract repository name from git remote URL
	REMOTE_URL=$(git config --get remote.origin.url)
	if [ -n "$REMOTE_URL" ]; then
		# Remove .git suffix and extract repo name
		PROJECT_NAME=$(basename -s .git "$REMOTE_URL")
	else
		# Fallback to directory name
		PROJECT_NAME=$(basename "$PROJECT_DIR")
	fi
else
	# Not in a git repository, use directory name
	PROJECT_NAME=$(basename "$PROJECT_DIR")
fi

# Source library functions
source "$TRANSLATOR_DIR/bin/lib.sh"

# Load project configuration
load_config "$TRANSLATOR_DIR" "$PROJECT_DIR"

# Load translation models
load_models "$TRANSLATOR_DIR" "$PROJECT_DIR"

# Verify configuration is loaded correctly
echo "Using project directory: $PROJECT_DIR"
echo "Source directory: $SOURCE_DIR"
echo "Target directory: $TARGET_DIR"
echo "Translation chunk size: $TRANSLATION_CHUNK_SIZE"
echo "Main branch: $MAIN_BRANCH"
echo "MD5 file: $MD5_FILE_PATH"
echo "Role template: $ROLE_TEMPLATE"

# Find other languages
languages=()
for language in "$TARGET_DIR"/*/; do
	if [ -d "$language" ] && [ "$language" != "$SOURCE_DIR" ]; then
		dir_name=$(basename "$language")
		if [ "$dir_name" != "english" ]; then
			languages+=("$dir_name")
		fi
	fi
done

echo "Languages to translate: ${languages[*]}"

# Create a clear file in case of missing
if [ ! -f "$MD5_FILE_PATH" ]; then
	echo "{}" > "$MD5_FILE_PATH"
fi

has_all_languages() {
	local relative_path="$1"
	local all_exist=true

	for language in "${languages[@]}"; do
		target_path="$TARGET_DIR/$language/$relative_path"
		if [ ! -f "$target_path" ]; then
			all_exist=false
			break
		fi
	done

	echo $all_exist
}

# Function to extract code blocks and replace them with placeholders
extract_code_blocks() {
	local content="$1"
	local temp_content=$(mktemp)
	local blocks_dir=$(mktemp -d)
	local block_index=0
	local in_code_block=false
	local current_block=""

	# Process the content line by line to extract code blocks
	while IFS= read -r line || [ -n "$line" ]; do
		if [[ "$line" =~ ^(\s*)(\`\`\`)(.*)$ ]]; then
			if [ "$in_code_block" = false ]; then
				# Start of a code block
				in_code_block=true
				current_block="$line"
			else
				# End of a code block
				current_block+=$'\n'"$line"
				# Write code block to a file
				echo "$current_block" > "$blocks_dir/block_$block_index"
				# Replace with placeholder in the content
				echo "CODE_BLOCK_$block_index" >> "$temp_content"
				((block_index++))
				in_code_block=false
				current_block=""
			fi
		elif [ "$in_code_block" = true ]; then
			# Inside a code block
			current_block+=$'\n'"$line"
		else
			# Regular content
			echo "$line" >> "$temp_content"
		fi
	done <<< "$content"

	# If we're still in a code block at the end, add it anyway (malformed markdown)
	if [ "$in_code_block" = true ]; then
		echo "$current_block" > "$blocks_dir/block_$block_index"
		echo "CODE_BLOCK_$block_index" >> "$temp_content"
		((block_index++))
	fi

	# Return the content file, blocks directory and count
	echo "$temp_content $blocks_dir $block_index"
}

# Function to restore code blocks
restore_code_blocks() {
	local content_file="$1"
	local output_file="$2"
	local blocks_dir="$3"
	local block_count="$4"

	> "$output_file"

	while IFS= read -r line || [ -n "$line" ]; do
		if [[ "$line" =~ ^CODE_BLOCK_([0-9]+)$ ]]; then
			block_index="${BASH_REMATCH[1]}"
			# Get the block from its file
			if [ -f "$blocks_dir/block_$block_index" ]; then
				cat "$blocks_dir/block_$block_index" >> "$output_file"
			else
				echo "ERROR: Missing code block $block_index" >> "$output_file"
			fi
		else
			echo "$line" >> "$output_file"
		fi
	done < "$content_file"

	# Remove trailing newline if the original didn't have one
	if [[ "$(tail -c1 "$content_file")" != "" ]]; then
		truncate -s -1 "$output_file"
	fi

	# Clean up
	rm -rf "$blocks_dir"
}

translate_chunk() {
	local chunk="$1"
	local language="$2"
	local temp_file="$3"
	local attempt=1
	local translation_temp=$(mktemp)
	# We compare non empty line count so no tolerance here
	local tolerance=0  # Allow for small differences in line count

	# Create temporary file for source chunk to enable file-based comparison
	local source_temp=$(mktemp)
	echo "$chunk" > "$source_temp"

	# Count lines in source chunk
	local source_lines=$(grep -c '[^[:space:]]' < "$source_temp")

	max_attempts=${#ATTEMPTS[@]}
	while [ $attempt -le $max_attempts ]; do
		model=${ATTEMPTS[$attempt]}
		echo "    Attempt $attempt of $max_attempts with $model..."
		> "$translation_temp"

		# Attempt translation
		if ! printf "%s" "$chunk" | aichat -m "$model" --role "$PROJECT_NAME-translate-to-$language" -S > "$translation_temp"; then
			echo "    Translation command failed"
			rm -f "$translation_temp" "$source_temp"
			return 1

		fi

		# Count lines in translated chunk
		local translated_lines=$(grep -c '[^[:space:]]' < "$translation_temp")
		local line_diff=$((source_lines - translated_lines))
		line_diff=${line_diff#-}  # Get absolute value

		local has_invalid_keys=
		if [ "$CHECK_YAML_KEYS" = true ]; then
			has_invalid_keys=$(yq '.. | select(.) | path | join(".")' < "$translation_temp" 2>/dev/null | grep -E '[^a-zA-Z0-9_.-]')
		fi
		#$(yq '.. | select(.) | path | join(".")' < "$translation_temp" 2>/dev/null | grep -E '[^a-zA-Z0-9_.-]')

		# Use optimized line structure matching
		if check_line_structure_match "$source_temp" "$translation_temp" && [ -z "$has_invalid_keys" ]; then
		# Success - append to main temp file and add empty line
		cat "$translation_temp" >> "$temp_file"
		echo "" >> "$temp_file"
		rm -f "$translation_temp" "$source_temp"
		return 0
	else
		# Invalid yaml keys check
		if [ -n "$has_invalid_keys" ]; then
			echo "    Warning: Invalid keys in chunk (attempt $attempt/$max_attempts)"
			echo "    Invalid keys: $has_invalid_keys"
		fi

		# Line structure check
		if ! check_line_structure_match "$source_temp" "$translation_temp"; then
			echo "    Warning: Line structure mismatch in chunk (attempt $attempt/$max_attempts)"
			echo "    Source total lines: $(wc -l < "$source_temp")"
			echo "    Translated total lines: $(wc -l < "$translation_temp")"
		fi

		# Optional: Log problematic translations for review
		if [ $attempt -eq "$max_attempts" ]; then
			echo "    Last translation attempt content preview (first 3 lines):"
			head -n 3 "$translation_temp"
		fi

		((attempt++))
	fi
done

# If we get here, all attempts failed
echo "    Error: Failed to get valid translation after $max_attempts attempts"
rm -f "$translation_temp" "$source_temp"
return 1
}

translate_file() {
	local relative_path="$1"
	local diff_file="$2"
	local translation_failed=0
	local source_file="$SOURCE_DIR/$relative_path"

	for language in "${languages[@]}"; do
		echo " -> $language"
		target_path="$TARGET_DIR/$language/$relative_path"
		
		# Track if file existed before translation attempt
		file_existed_before=false
		if [ -f "$target_path" ]; then
			file_existed_before=true
		fi
		
		if [ -f "$target_path" ] && [ -z "$diff_file" ]; then
			echo "  exists"
			continue
		fi

		dir=$(dirname "$target_path")
		if [ ! -d "$dir" ]; then
			echo "  creating directory"
			mkdir -p "$dir"
		fi

		# Create temporary file for building the translation
		temp_file=$(mktemp)

		# Read the entire file content
		if [ -z "$diff_file" ]; then
			content=$(<"$source_file")
		else
			content=$(<"$diff_file")
		fi

		# Extract code blocks and get transformed content
		echo "  extracting code blocks"
		extraction_result=$(extract_code_blocks "$content")
		read -r content_file_with_placeholders blocks_dir block_count <<< "$extraction_result"

		# Read the transformed content with placeholders
		content_with_placeholders=$(<"$content_file_with_placeholders")

		# Split content into chunks by double newlines (paragraph separation)
		IFS=$'\n\n' read -r -d '' -a raw_chunks <<< "$content_with_placeholders"

		# Initialize variables for chunk processing
		declare -a chunks=()
		current_chunk=""
		current_size=0

		# Process raw chunks and combine them based on byte size
		for raw_chunk in "${raw_chunks[@]}"; do
			chunk_size=${#raw_chunk}

			if [ $((current_size + chunk_size)) -gt "$TRANSLATION_CHUNK_SIZE" ]; then
				# If current chunk is not empty, add it to chunks array
				if [ -n "$current_chunk" ]; then
					chunks+=("$current_chunk")
				fi
				current_chunk="$raw_chunk"
				current_size=$chunk_size
			else
				# Add to current chunk with proper separation
				if [ -n "$current_chunk" ]; then
					current_chunk+=$'\n\n'"$raw_chunk"
					current_size=$((current_size + chunk_size + 2))
				else
					current_chunk="$raw_chunk"
					current_size=$chunk_size
				fi
			fi
		done

		# Add the last chunk if it exists
		if [ -n "$current_chunk" ]; then
			chunks+=("$current_chunk")
		fi

		# Translate each chunk
		local chunk_index=0
		for chunk in "${chunks[@]}"; do
			((chunk_index++))
			chunk_size=${#chunk}
			echo "  translating chunk $chunk_index/${#chunks[@]} ($chunk_size bytes)"

			if ! translate_chunk "$chunk" "$language" "$temp_file"; then
				echo "  Error: translation failed for chunk $chunk_index"
				rm -f "$temp_file"
				rm -f "$content_file_with_placeholders"
				translation_failed=1
				break
			fi
			echo "  chunk $chunk_index completed successfully"
		done

		if [ $translation_failed -eq 0 ]; then
			# Restore code blocks in the translated content
			echo "  restoring code blocks"
			restored_file=$(mktemp)
			restore_code_blocks "$temp_file" "$restored_file" "$blocks_dir" "$block_count"

			if [ -n "$diff_file" ]; then # Apply partial diff patch
				patch_file=$(mktemp)
				if sync_files "$diff_file" "$restored_file" > "$patch_file"; then
					patch_translation_file "$target_path" "$patch_file"
					echo "  diff file synced and applied"
				else
					echo "  error: failed to sync diff file"
					translation_failed=1
				fi
			else # Full file translation case
				# Synchronize files with exact lines position
				if sync_files "$source_file" "$restored_file" > "$target_path"; then
					echo "  completed: $target_path"
				else
					echo "  error: failed to sync files"
					translation_failed=1
					# Only remove if file was created during this translation attempt
					if [ "$file_existed_before" = false ]; then
						rm -f "$target_path"
					fi
				fi
			fi

			rm -f "$restored_file"
		else
			# Translation failed - only remove file if it was created during this attempt
			if [ "$file_existed_before" = false ]; then
				rm -f "$target_path"
			fi
		fi

		if [ -f "$temp_file" ]; then
			rm -f "$temp_file"
		fi

		if [ -f "$content_file_with_placeholders" ]; then
			rm -f "$content_file_with_placeholders"
		fi

	done

	# Clean up after
	if [ -n "$diff_file" ]; then
		rm -f "$diff_file"
	fi
	return $translation_failed
}


copy_non_md_files() {
	local dir="$1"

	# Find all non-MD files
	find "$dir" -type f ! -name "*.md" -print0 | while IFS= read -r -d '' file; do
	# Get relative path
	relative_path=${file#"$SOURCE_DIR"/}

	for language in "${languages[@]}"; do
		target_path="$TARGET_DIR/$language/$relative_path"

			# Check if target file exists
			if [ ! -f "$target_path" ]; then
				echo "Copying non-MD file: $relative_path to $language"

				# Create target directory if it doesn't exist
				target_dir=$(dirname "$target_path")
				mkdir -p "$target_dir"

				# Copy the file
				cp "$file" "$target_path"
				fi
			done
		done
	}
	# Function to process markdown files
	process_markdown_files() {
		local dir="$1"
		local process_failed=0

	# Find all .md files in the directory and subdirectories
	mapfile -t markdown_files < <(find "$dir" -type f -name "*.md")
	for file in "${markdown_files[@]}"; do
		# Calculate MD5 hash of the file
		current_md5=$(md5sum "$file" | cut -d' ' -f1)

		# Get relative path
		relative_path=${file#"$SOURCE_DIR"/}

		# Check if MD5 exists in the MD5_FILE
		# When not found it returns null, so next we check if it is null
		existing_md5=$(jq -r ".[\"$relative_path\"]" "$MD5_FILE_PATH" 2>/dev/null)

		echo "Processing: $relative_path"

		# Skip if MD5 matches and write yaml diff to file in case we have
		diff_file=
		if [ "${#existing_md5}" -eq 32 ] && [ "$existing_md5" != "$current_md5" ]; then
			diff_file=$(create_diff_yaml_file "$file" "$MAIN_BRANCH" "$PROJECT_DIR")
			echo " file changed, diff file created: $diff_file"
		fi

		all_languages=$(has_all_languages "$relative_path")
		if [ -z "$diff_file" ] && [ "$all_languages" = true ]; then
			echo " all languages exist, skipping"
			continue
		fi

		echo " translating"
		if ! translate_file "$relative_path" "$diff_file"; then
			echo "Warning: Translation failed for $relative_path"
			process_failed=1
			continue
		fi

		# Update the output JSON file with the new MD5
		if ! jq --arg path "$relative_path" --arg md5 "$current_md5" \
			'. + {($path): $md5}' "$MD5_FILE_PATH" > "$MD5_FILE_PATH.tmp"; then
					echo "Error: Failed to update JSON file"
					process_failed=1
					continue
		fi
		mv "$MD5_FILE_PATH.tmp" "$MD5_FILE_PATH"
	done
	return $process_failed
}

# Check if source directory exists
if [ ! -d "$SOURCE_DIR" ]; then
	echo "Error: Source directory does not exist"
	exit 1
fi

# Check that everything installed we need
check_prerequisites "${languages[@]}"

# Check and install translation roles
check_translation_roles || {
	echo "Error setting up translation roles"
	exit 1
}

# Process markdown files first
process_markdown_files "$SOURCE_DIR"

# Process moving of non-md files as a final step
copy_non_md_files "$SOURCE_DIR"

echo "Processing complete."

