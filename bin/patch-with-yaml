#!/usr/bin/env bash

# Check if both input files are provided
if [ "$#" -ne 2 ]; then
	echo "Usage: $0 <target_file> <yaml_diff_file>"
	exit 1
fi

target_file="$1"
yaml_diff="$2"
temp_file=$(mktemp)

# Create empty target file if it doesn't exist
touch "$target_file"

# Copy the target file to temp file
cp "$target_file" "$temp_file"

# Parse YAML file for operations
current_key=""
current_op=""
current_line=""
block_content=""
content_mode=false

# Process the YAML diff file line by line
while IFS= read -r line; do
	# If we're in content mode and encounter a new key, process the previous block
	if [[ $content_mode == true && ($line =~ ^add[0-9]+:\ \| || $line =~ ^del[0-9]+:) ]]; then
		# Apply the current block before moving to the next one
		if [ "$current_op" == "add" ]; then
			# Handle empty files differently
			if [ ! -s "$temp_file" ]; then
				echo "$block_content" > "$temp_file"
			else
				# Insert content at specified line using sed
				# Create a temporary file with the content to insert
				content_temp=$(mktemp)
				echo "$block_content" > "$content_temp"
				# Use sed to insert the content before the specified line
				# Since sed 'r' inserts AFTER the line, we use (line-1) to insert BEFORE line
				insert_line=$((current_line - 1))
				file_lines=$(wc -l < "$temp_file" | tr -d ' ')
				if [ $insert_line -le 0 ]; then
					# If inserting at the beginning, prepend
					cat "$content_temp" "$temp_file" > "${temp_file}.new" && mv "${temp_file}.new" "$temp_file"
				elif [ $insert_line -ge $file_lines ]; then
					# If insertion point is beyond file, append
					cat "$temp_file" "$content_temp" > "${temp_file}.new" && mv "${temp_file}.new" "$temp_file"
				else
					# Insert after line (insert_line), which means before line (current_line)
					sed -e "${insert_line}r $content_temp" "$temp_file" > "${temp_file}.new" && mv "${temp_file}.new" "$temp_file"
				fi
				rm -f "$content_temp"
			fi
		fi
		content_mode=false
		block_content=""
	fi

		# Check for new key definitions
		if [[ $line =~ ^add([0-9]+):\ \| ]]; then
			current_op="add"
			current_line="${BASH_REMATCH[1]}"
			content_mode=true
			block_content=""
			continue
		elif [[ $line =~ ^del([0-9]+): ]]; then
			current_op="del"
			current_line="${BASH_REMATCH[1]}"

				# For del operations, immediately delete the line
				if [ -s "$temp_file" ]; then
					awk -v line="$current_line" 'NR != line' "$temp_file" > "${temp_file}.new" && mv "${temp_file}.new" "$temp_file"
				fi

				continue
		fi

		# If in content mode, collect content lines (remove the leading two spaces)
		if [ "$content_mode" == true ]; then
			if [[ $line =~ ^[[:space:]]+ ]]; then
				line="${line:2}"  # Remove leading two spaces
			fi

			if [ -z "$block_content" ]; then
				block_content="$line"
			else
				block_content="${block_content}"$'\n'"$line"
			fi
		fi
	done < "$yaml_diff"

# Process any remaining content block at the end of file
if [ "$content_mode" == true ] && [ "$current_op" == "add" ] && [ -n "$block_content" ]; then
	if [ ! -s "$temp_file" ]; then
		echo "$block_content" > "$temp_file"
	else
		# Insert content at specified line using sed
		# Create a temporary file with the content to insert
		content_temp=$(mktemp)
		echo "$block_content" > "$content_temp"
		# Use sed to insert the content before the specified line
		# Since sed 'r' inserts AFTER the line, we use (line-1) to insert BEFORE line
		insert_line=$((current_line - 1))
		file_lines=$(wc -l < "$temp_file" | tr -d ' ')
		if [ $insert_line -le 0 ]; then
			# If inserting at the beginning, prepend
			cat "$content_temp" "$temp_file" > "${temp_file}.new" && mv "${temp_file}.new" "$temp_file"
		elif [ $insert_line -ge $file_lines ]; then
			# If insertion point is beyond file, append
			cat "$temp_file" "$content_temp" > "${temp_file}.new" && mv "${temp_file}.new" "$temp_file"
		else
			# Insert after line (insert_line), which means before line (current_line)
			sed -e "${insert_line}r $content_temp" "$temp_file" > "${temp_file}.new" && mv "${temp_file}.new" "$temp_file"
		fi
		rm -f "$content_temp"
	fi
fi

# Output the final patched content
cat "$temp_file"
rm "$temp_file"
